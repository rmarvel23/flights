{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPUU+qbVi2QNvSq5xHNJ4jQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rmarvel23/projects/blob/main/TwitterProject\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "id": "2xMtzrga7R2s"
      },
      "outputs": [],
      "source": [
        "import chardet\n",
        "import pandas as pd\n",
        "\n",
        "def detectar_encoding(archivo_csv):\n",
        "    with open(archivo_csv, 'rb') as f:\n",
        "        resultado = chardet.detect(f.read())\n",
        "    return resultado['encoding']\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "detectar_encoding(\"/content/train.csv\")"
      ],
      "metadata": {
        "id": "XJusbjIj7xRd",
        "outputId": "2aacdaa0-7106-45f5-cce8-bd9547a8a4dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Windows-1252'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def read_csv(csv, encoding):\n",
        "    df = pd.read_csv(csv, encoding=encoding, sep= \",\", on_bad_lines='skip')\n",
        "    return df"
      ],
      "metadata": {
        "id": "8tZISr8n8ZZg"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = read_csv('/content/train.csv','Windows-1252' )"
      ],
      "metadata": {
        "id": "ATyjwnDJ8nlU"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class DataError(Exception):\n",
        "    pass"
      ],
      "metadata": {
        "id": "7LT3eQdWAEyV"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class DataReviewer:\n",
        "\n",
        "    def __init__(self,df):\n",
        "      self.df = df\n",
        "      self.data_cleaner = DataCleaner(df)\n",
        "\n",
        "    def show_sample(self, n=5):\n",
        "      try:\n",
        "            return self.df.sample(n)\n",
        "      except Exception as e:\n",
        "            raise DataError(f\"Error showing sample: {e}\")\n",
        "\n",
        "    def get_info(self):\n",
        "        try:\n",
        "            return self.df.info()\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error showing sample: {e}\")\n",
        "\n",
        "    def describe(self):\n",
        "        try:\n",
        "            return self.df.describe()\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error showing sample: {e}\")\n",
        "\n",
        "    def get_columns(self):\n",
        "        try:\n",
        "            return self.df.columns\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error showing sample: {e}\")\n",
        "\n",
        "    def count_rows(self, column):\n",
        "        try:\n",
        "            if column in self.df.columns:\n",
        "                return self.df[column].count()\n",
        "            else:\n",
        "                raise DataError(f\"Column '{column}' not found in dataset.\")\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error counting rows: {e}\")\n",
        "\n",
        "    def get_unique(self,column):\n",
        "        try:\n",
        "            if column in self.df.columns:\n",
        "                return self.df[column].unique()\n",
        "            else:\n",
        "                raise DataError(f\"Column '{column}' not found in dataset.\")\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error getting unique values: {e}\")\n",
        "\n",
        "    def check_nulls(self):\n",
        "        try:\n",
        "            return self.df.isnull().any()\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error checking nulls: {e}\")\n",
        "\n",
        "    def get_percentage_nulls(self):\n",
        "        try:\n",
        "            return self.df.isnull().sum() / len(self.df) * 100\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error checking nulls: {e}\")\n",
        "\n",
        "    def get_dtypes(self):\n",
        "        try:\n",
        "            return self.df.dtypes\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error checking nulls: {e}\")\n",
        "\n",
        "    def shape(self):\n",
        "        try:\n",
        "            return self.df.shape\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error getting shape: {e}\")\n",
        "\n",
        "    def count_unique(self, column):\n",
        "        try:\n",
        "            if column in self.df.columns:\n",
        "                return self.df[column].nunique()\n",
        "            else:\n",
        "                raise DataError(f\"Column '{column}' not found in dataset.\")\n",
        "        except Exception as e:\n",
        "            raise DataError(f\"Error counting unique values: {e}\")"
      ],
      "metadata": {
        "id": "ZeHQfxnu_tH5"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class DataCleaner:\n",
        "    def __init__(self, df):\n",
        "        self.df = df\n",
        "\n",
        "    def drop_unnecessary_col(self):\n",
        "        unnecessary_columns = ['textID', 'selected_text', 'Population -2020', 'Land Area (Km²)', 'Density (P/Km²);;;;;;;;;;;;']\n",
        "        try:\n",
        "            self.df = self.df.drop(columns=unnecessary_columns, errors='ignore')\n",
        "            return self.df\n",
        "        except KeyError as e:\n",
        "            raise DataError(f\"Error dropping columns: {e}\")\n",
        "\n",
        "    def remove_nulls(self):\n",
        "        columns_to_check = [\"sentiment\", \"Time of Tweet\", \"Age of User\", \"Country\", \"text\"]\n",
        "        try:\n",
        "            self.df = self.df.dropna(subset=columns_to_check)\n",
        "            return self.df\n",
        "        except KeyError as e:\n",
        "            raise DataError(f\"Error dropping nulls: {e}\")\n",
        "\n",
        "    def rename_col(self):\n",
        "        try:\n",
        "            self.df = self.df.rename(columns={\"Time of Tweet\": \"Time\", \"Age of User\": \"Age\"})\n",
        "            return self.df\n",
        "        except KeyError as e:\n",
        "            raise DataError(f\"Error renaming columns: {e}\")"
      ],
      "metadata": {
        "id": "C6K3QDs6_Vyn"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned = DataCleaner(df)"
      ],
      "metadata": {
        "id": "_4T6ZCXV_qm5"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = cleaned.drop_unnecessary_col()"
      ],
      "metadata": {
        "id": "a_CNpLPe_tje"
      },
      "execution_count": 140,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = cleaned.remove_nulls()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "O2pfXmc9_w4W",
        "outputId": "b8c824ff-195a-40f2-c4f8-b8726be69dd4"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "error",
          "ename": "DataError",
          "evalue": "Error dropping nulls: ['Time of Tweet', 'Age of User']",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-138-1b09a8d9b6fa>\u001b[0m in \u001b[0;36mremove_nulls\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolumns_to_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdropna\u001b[0;34m(self, axis, how, thresh, subset, inplace, ignore_index)\u001b[0m\n\u001b[1;32m   6406\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6407\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcheck\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6408\u001b[0m             \u001b[0magg_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0magg_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: ['Time of Tweet', 'Age of User']",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mDataError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-141-c67e26c3ee92>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcleaned\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove_nulls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-138-1b09a8d9b6fa>\u001b[0m in \u001b[0;36mremove_nulls\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mDataError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Error dropping nulls: {e}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrename_col\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mDataError\u001b[0m: Error dropping nulls: ['Time of Tweet', 'Age of User']"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = cleaned.rename_col()"
      ],
      "metadata": {
        "id": "9dec6tp9_zpx"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NTACNXwc_45D",
        "outputId": "8deb2c26-c45b-4161-8387-82ccd7afe880"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "text         2\n",
              "sentiment    0\n",
              "Time         0\n",
              "Age          0\n",
              "Country      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "yTdRd8PfANEF",
        "outputId": "635d815b-5fb8-4e68-fa85-aa3cc0661e6c"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    text sentiment     Time  \\\n",
              "1          Sooo SAD I will miss you here in San Diego!!!  negative     noon   \n",
              "2                              my boss is bullying me...  negative    night   \n",
              "3                         what interview! leave me alone  negative  morning   \n",
              "5      http://www.dothebouncy.com/smf - some shameles...   neutral    night   \n",
              "6      2am feedings for the baby are fun when he is a...  positive  morning   \n",
              "...                                                  ...       ...      ...   \n",
              "27431                                     enjoy ur night  positive     noon   \n",
              "27432   wish we could come see u on Denver  husband l...  negative    night   \n",
              "27434   Yay good for both of you. Enjoy the break - y...  positive     noon   \n",
              "27435                         But it was worth it  ****.  positive    night   \n",
              "27436     All this flirting going on - The ATG smiles...   neutral  morning   \n",
              "\n",
              "          Age              Country  \n",
              "1       21-30              Albania  \n",
              "2       31-45              Algeria  \n",
              "3       46-60              Andorra  \n",
              "5      70-100  Antigua and Barbuda  \n",
              "6        0-20            Argentina  \n",
              "...       ...                  ...  \n",
              "27431   21-30              Germany  \n",
              "27432   31-45                Ghana  \n",
              "27434   60-70              Grenada  \n",
              "27435  70-100            Guatemala  \n",
              "27436    0-20               Guinea  \n",
              "\n",
              "[20925 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c0d8606-be78-4016-9778-9892eb830575\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>Time</th>\n",
              "      <th>Age</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sooo SAD I will miss you here in San Diego!!!</td>\n",
              "      <td>negative</td>\n",
              "      <td>noon</td>\n",
              "      <td>21-30</td>\n",
              "      <td>Albania</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>my boss is bullying me...</td>\n",
              "      <td>negative</td>\n",
              "      <td>night</td>\n",
              "      <td>31-45</td>\n",
              "      <td>Algeria</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>what interview! leave me alone</td>\n",
              "      <td>negative</td>\n",
              "      <td>morning</td>\n",
              "      <td>46-60</td>\n",
              "      <td>Andorra</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>http://www.dothebouncy.com/smf - some shameles...</td>\n",
              "      <td>neutral</td>\n",
              "      <td>night</td>\n",
              "      <td>70-100</td>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2am feedings for the baby are fun when he is a...</td>\n",
              "      <td>positive</td>\n",
              "      <td>morning</td>\n",
              "      <td>0-20</td>\n",
              "      <td>Argentina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27431</th>\n",
              "      <td>enjoy ur night</td>\n",
              "      <td>positive</td>\n",
              "      <td>noon</td>\n",
              "      <td>21-30</td>\n",
              "      <td>Germany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27432</th>\n",
              "      <td>wish we could come see u on Denver  husband l...</td>\n",
              "      <td>negative</td>\n",
              "      <td>night</td>\n",
              "      <td>31-45</td>\n",
              "      <td>Ghana</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27434</th>\n",
              "      <td>Yay good for both of you. Enjoy the break - y...</td>\n",
              "      <td>positive</td>\n",
              "      <td>noon</td>\n",
              "      <td>60-70</td>\n",
              "      <td>Grenada</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27435</th>\n",
              "      <td>But it was worth it  ****.</td>\n",
              "      <td>positive</td>\n",
              "      <td>night</td>\n",
              "      <td>70-100</td>\n",
              "      <td>Guatemala</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27436</th>\n",
              "      <td>All this flirting going on - The ATG smiles...</td>\n",
              "      <td>neutral</td>\n",
              "      <td>morning</td>\n",
              "      <td>0-20</td>\n",
              "      <td>Guinea</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20925 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c0d8606-be78-4016-9778-9892eb830575')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c0d8606-be78-4016-9778-9892eb830575 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c0d8606-be78-4016-9778-9892eb830575');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-184bd9f4-f0f0-4592-a3f3-e76b4104e9f1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-184bd9f4-f0f0-4592-a3f3-e76b4104e9f1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-184bd9f4-f0f0-4592-a3f3-e76b4104e9f1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20925,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20920,\n        \"samples\": [\n          \" I WISH I could be in bed by nine once in a while. I never make it in before 3-4 a.m.  #sleepdeprived. Doing too much.\",\n          \" Ha good morning! May the fourth be with you too\",\n          \" how can I read the Floyd article says it`s private\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"negative\",\n          \"neutral\",\n          \"noon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"60-70\",\n          \"night\",\n          \"0-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 39,\n        \"samples\": [\n          \"Canada\",\n          \"Jordan\",\n          \"0-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 228,\n        \"samples\": [\n          \"7976983\",\n          \"Kyrgyzstan\",\n          \"Bahrain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class WrongDataRemover():\n",
        "    def __init__(self, df):\n",
        "        self.df = df\n",
        "    def remove_wrong_age(self):\n",
        "        valid_ranges = [\"0-20\", \"21-30\", \"31-45\", \"46-60\", \"60-70\", \"70-100\"]\n",
        "        self.df = self.df[self.df['Age'].isin(valid_ranges)]\n",
        "        return self.df\n",
        "    def remove_wrong_time(self):\n",
        "        valid_data = [\"noon\", \"night\", \"morning\"]\n",
        "        self.df = self.df[self.df['Time'].isin(valid_data)]\n",
        "        return self.df\n",
        "    def remove_wrong_countries(self):\n",
        "        valid_data = ['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',\n",
        "       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',\n",
        "       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',\n",
        "       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',\n",
        "       'Burkina Faso', 'Burundi', \"Côte d'Ivoire\", 'Cabo Verde',\n",
        "       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',\n",
        "       'China', 'Comoros', 'Croatia', 'Cuba', 'Czechia (Czech Republic)',\n",
        "       'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        "       'Dominican Republic', 'Ecuador', 'El Salvador',\n",
        "       'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji',\n",
        "       'Finland', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',\n",
        "       'Greece', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guyana',\n",
        "       'Honduras', 'Hungary', 'India', 'Indonesia', 'Iraq', 'Ireland',\n",
        "       'Israel', 'Italy', 'Japan', 'Jordan', 'Kenya', 'Kiribati',\n",
        "       'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho',\n",
        "       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malaysia',\n",
        "       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',\n",
        "       'Mexico', 'Micronesia', 'Monaco', 'Montenegro', 'Morocco',\n",
        "       'Mozambique', 'Myanmar (formerly Burma)', 'Nepal', 'Nicaragua',\n",
        "       'Niger', 'North Korea', 'North Macedonia', 'Norway', 'Pakistan',\n",
        "       'Palau', 'Palestine State', 'Panama', 'Papua New Guinea',\n",
        "       'Paraguay', 'Philippines', 'Portugal', 'Rwanda', 'Saint Lucia',\n",
        "       'Saint Vincent and the Grenadines', 'Samoa',\n",
        "       'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',\n",
        "       'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Somalia',\n",
        "       'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan',\n",
        "       'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan',\n",
        "       'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga',\n",
        "       'Trinidad and Tobago', 'Tunisia', 'Turkmenistan', 'Tuvalu',\n",
        "       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',\n",
        "       'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu',\n",
        "       'Venezuela', 'Yemen', 'Zambia', 'Zimbabwe', 'Afghanistan',\n",
        "       'Angola', 'Azerbaijan', 'Belgium', 'Belize', 'Bolivia', 'Bulgaria',\n",
        "       'Chad', 'Chile', 'Costa Rica', 'Cyprus', 'Dominica', 'Egypt',\n",
        "       'France', 'Haiti', 'Iceland', 'Jamaica', 'Madagascar', 'Malawi',\n",
        "       'Namibia', 'Nauru', 'Netherlands', 'New Zealand', 'Nigeria',\n",
        "       'Oman', 'Poland', 'Qatar', 'Russia', 'Saint Kitts and Nevis',\n",
        "       'San Marino', 'Slovakia', 'Solomon Islands', 'South Africa',\n",
        "       'Turkey', 'Vietnam', 'Belarus', 'Colombia',\n",
        "       'Congo (Congo-Brazzaville)', 'Guinea', 'Holy See', 'Kazakhstan',\n",
        "       'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran', 'Mauritius', 'Liberia', 'Eswatini (fmr. \"\"\"\"Swaziland\"\"\"\")\"\"']\n",
        "        self.df = self.df[self.df['Country'].isin(valid_data)]\n",
        "        return self.df\n",
        "\n",
        "    def change_country_names(self):\n",
        "        replace_dict = {\"Czechia (Czech Republic)\" : \"Czechia\",\n",
        "                        \"Democratic Republic of the Congo\": \"R.D. Congo\",\n",
        "                        \"Myanmar (formerly Burma)\": \"Myanmar\",\n",
        "                        \"Congo (Congo-Brazzaville)\" : \"Congo-Brazzaville\",\n",
        "                        'Eswatini (fmr. \"\"\"\"Swaziland\"\"\"\")\"\"' : \"Eswatini\"\n",
        "\n",
        "\n",
        "        }\n",
        "        self.df['Country'] = df['Country'].replace(replace_dict)\n",
        "        return df\n",
        "\n",
        "    def remove_wrong_sentiment(self):\n",
        "        valid_sentiment = [\"positive\", \"negative\", \"neutral\"]\n",
        "        self.df = self.df[self.df['sentiment'].isin(valid_sentiment)]\n",
        "        return self.df\n"
      ],
      "metadata": {
        "id": "Px40LmIW0WcB"
      },
      "execution_count": 216,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9tlg-O88FeQ9",
        "outputId": "8f11393d-41be-480b-fe92-6f6279a33367"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',\n",
              "       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',\n",
              "       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',\n",
              "       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',\n",
              "       'Burkina Faso', 'Burundi', \"Côte d'Ivoire\", 'Cabo Verde',\n",
              "       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',\n",
              "       'China', 'Comoros', 'Croatia', 'Cuba', 'Czechia', 'R.D. Congo',\n",
              "       'Denmark', 'Djibouti', 'Dominican Republic', 'Ecuador',\n",
              "       'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia',\n",
              "       'Ethiopia', 'Fiji', 'Finland', 'Gabon', 'Gambia', 'Georgia',\n",
              "       'Germany', 'Ghana', 'Greece', 'Grenada', 'Guatemala',\n",
              "       'Guinea-Bissau', 'Guyana', 'Honduras', 'Hungary', 'India',\n",
              "       'Indonesia', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Japan',\n",
              "       'Jordan', 'Kenya', 'Kiribati', 'Kuwait', 'Kyrgyzstan', 'Laos',\n",
              "       'Latvia', 'Lebanon', 'Lesotho', 'Libya', 'Liechtenstein',\n",
              "       'Lithuania', 'Luxembourg', 'Malaysia', 'Maldives', 'Mali', 'Malta',\n",
              "       'Marshall Islands', 'Mauritania', 'Mexico', 'Micronesia', 'Monaco',\n",
              "       'Montenegro', 'Morocco', 'Mozambique', 'Myanmar', 'Nepal',\n",
              "       'Nicaragua', 'Niger', 'North Korea', 'North Macedonia', 'Norway',\n",
              "       'Pakistan', 'Palau', 'Palestine State', 'Panama',\n",
              "       'Papua New Guinea', 'Paraguay', 'Philippines', 'Portugal',\n",
              "       'Rwanda', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
              "       'Samoa', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
              "       'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia',\n",
              "       'Somalia', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka',\n",
              "       'Sudan', 'Suriname', 'Sweden', 'Switzerland', 'Syria',\n",
              "       'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo',\n",
              "       'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkmenistan',\n",
              "       'Tuvalu', 'Uganda', 'Ukraine', 'United Arab Emirates',\n",
              "       'United Kingdom', 'United States of America', 'Uruguay',\n",
              "       'Uzbekistan', 'Vanuatu', 'Venezuela', 'Yemen', 'Zambia',\n",
              "       'Zimbabwe', 'Afghanistan', 'Angola', 'Azerbaijan', 'Belgium',\n",
              "       'Belize', 'Bolivia', 'Bulgaria', 'Chad', 'Chile', 'Costa Rica',\n",
              "       'Cyprus', 'Dominica', 'Egypt', 'France', 'Haiti', 'Iceland',\n",
              "       'Jamaica', 'Madagascar', 'Malawi', 'Namibia', 'Nauru',\n",
              "       'Netherlands', 'New Zealand', 'Nigeria', 'Oman', 'Poland', 'Qatar',\n",
              "       'Russia', 'Saint Kitts and Nevis', 'San Marino', 'Slovakia',\n",
              "       'Solomon Islands', 'South Africa', 'Turkey', 'Vietnam', 'Belarus',\n",
              "       'Colombia', 'Congo-Brazzaville', 'Guinea', 'Holy See',\n",
              "       'Kazakhstan', 'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran',\n",
              "       'Mauritius', 'Liberia', 'Eswatini (fmr. \"\"\"\"Swaziland\"\"\"\")\"\"'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "remover1 = WrongDataRemover(df)"
      ],
      "metadata": {
        "id": "0fcoSoRNAQbt"
      },
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = remover1.remove_wrong_age()"
      ],
      "metadata": {
        "id": "yP-QkOQ-AZAL"
      },
      "execution_count": 218,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = remover1.remove_wrong_countries()"
      ],
      "metadata": {
        "id": "tH4QLuafAcCt"
      },
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = remover1.remove_wrong_sentiment()"
      ],
      "metadata": {
        "id": "7NGFtS5hAemY"
      },
      "execution_count": 220,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = remover1.remove_wrong_time()"
      ],
      "metadata": {
        "id": "H6_4kDNQAmGL"
      },
      "execution_count": 221,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = remover1.change_country_names()"
      ],
      "metadata": {
        "id": "_hp2ghdOAUmV"
      },
      "execution_count": 222,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Country'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yYpryBpFBJ26",
        "outputId": "d9e58c63-dbc8-4f71-d922-0122337f418c"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',\n",
              "       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',\n",
              "       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',\n",
              "       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',\n",
              "       'Burkina Faso', 'Burundi', \"Côte d'Ivoire\", 'Cabo Verde',\n",
              "       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',\n",
              "       'China', 'Comoros', 'Croatia', 'Cuba', 'Denmark', 'Djibouti',\n",
              "       'Dominican Republic', 'Ecuador', 'El Salvador',\n",
              "       'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji',\n",
              "       'Finland', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',\n",
              "       'Greece', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guyana',\n",
              "       'Honduras', 'Hungary', 'India', 'Indonesia', 'Iraq', 'Ireland',\n",
              "       'Israel', 'Italy', 'Japan', 'Jordan', 'Kenya', 'Kiribati',\n",
              "       'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho',\n",
              "       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malaysia',\n",
              "       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',\n",
              "       'Mexico', 'Micronesia', 'Monaco', 'Montenegro', 'Morocco',\n",
              "       'Mozambique', 'Nepal', 'Nicaragua', 'Niger', 'North Korea',\n",
              "       'North Macedonia', 'Norway', 'Pakistan', 'Palau',\n",
              "       'Palestine State', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
              "       'Philippines', 'Portugal', 'Rwanda', 'Saint Lucia',\n",
              "       'Saint Vincent and the Grenadines', 'Samoa',\n",
              "       'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',\n",
              "       'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Somalia',\n",
              "       'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan',\n",
              "       'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan',\n",
              "       'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga',\n",
              "       'Trinidad and Tobago', 'Tunisia', 'Turkmenistan', 'Tuvalu',\n",
              "       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',\n",
              "       'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu',\n",
              "       'Venezuela', 'Yemen', 'Zambia', 'Zimbabwe', 'Afghanistan',\n",
              "       'Angola', 'Azerbaijan', 'Belgium', 'Belize', 'Bolivia', 'Bulgaria',\n",
              "       'Chad', 'Chile', 'Costa Rica', 'Cyprus', 'Dominica', 'Egypt',\n",
              "       'France', 'Haiti', 'Iceland', 'Jamaica', 'Madagascar', 'Malawi',\n",
              "       'Namibia', 'Nauru', 'Netherlands', 'New Zealand', 'Nigeria',\n",
              "       'Oman', 'Poland', 'Qatar', 'Russia', 'Saint Kitts and Nevis',\n",
              "       'San Marino', 'Slovakia', 'Solomon Islands', 'South Africa',\n",
              "       'Turkey', 'Vietnam', 'Belarus', 'Colombia', 'Guinea', 'Holy See',\n",
              "       'Kazakhstan', 'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran',\n",
              "       'Mauritius', 'Liberia', 'Eswatini'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class DataVisualizer(ABC):\n",
        "    def __init__(self, df):\n",
        "        self.df = df\n",
        "\n",
        "    @abstractmethod\n",
        "    def get_positive(self):\n",
        "        pass\n",
        "\n",
        "    @abstractmethod\n",
        "    def get_negative(self):\n",
        "        pass\n",
        "\n",
        "    @abstractmethod\n",
        "    def get_sentiment(self):\n",
        "        pass\n",
        "\n",
        "    @abstractmethod\n",
        "    def compare_sentiment(self):\n",
        "        pass\n",
        "\n",
        "class CountryAnalyzer(DataVisualizer):\n",
        "\n",
        "    available_countries = ['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',\n",
        "       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',\n",
        "       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',\n",
        "       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',\n",
        "       'Burkina Faso', 'Burundi', \"Côte d'Ivoire\", 'Cabo Verde',\n",
        "       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',\n",
        "       'China', 'Comoros', 'Croatia', 'Cuba', 'Denmark', 'Djibouti',\n",
        "       'Dominican Republic', 'Ecuador', 'El Salvador',\n",
        "       'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji',\n",
        "       'Finland', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',\n",
        "       'Greece', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guyana',\n",
        "       'Honduras', 'Hungary', 'India', 'Indonesia', 'Iraq', 'Ireland',\n",
        "       'Israel', 'Italy', 'Japan', 'Jordan', 'Kenya', 'Kiribati',\n",
        "       'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho',\n",
        "       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malaysia',\n",
        "       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',\n",
        "       'Mexico', 'Micronesia', 'Monaco', 'Montenegro', 'Morocco',\n",
        "       'Mozambique', 'Nepal', 'Nicaragua', 'Niger', 'North Korea',\n",
        "       'North Macedonia', 'Norway', 'Pakistan', 'Palau',\n",
        "       'Palestine State', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        "       'Philippines', 'Portugal', 'Rwanda', 'Saint Lucia',\n",
        "       'Saint Vincent and the Grenadines', 'Samoa',\n",
        "       'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',\n",
        "       'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Somalia',\n",
        "       'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan',\n",
        "       'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan',\n",
        "       'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga',\n",
        "       'Trinidad and Tobago', 'Tunisia', 'Turkmenistan', 'Tuvalu',\n",
        "       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',\n",
        "       'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu',\n",
        "       'Venezuela', 'Yemen', 'Zambia', 'Zimbabwe', 'Afghanistan',\n",
        "       'Angola', 'Azerbaijan', 'Belgium', 'Belize', 'Bolivia', 'Bulgaria',\n",
        "       'Chad', 'Chile', 'Costa Rica', 'Cyprus', 'Dominica', 'Egypt',\n",
        "       'France', 'Haiti', 'Iceland', 'Jamaica', 'Madagascar', 'Malawi',\n",
        "       'Namibia', 'Nauru', 'Netherlands', 'New Zealand', 'Nigeria',\n",
        "       'Oman', 'Poland', 'Qatar', 'Russia', 'Saint Kitts and Nevis',\n",
        "       'San Marino', 'Slovakia', 'Solomon Islands', 'South Africa',\n",
        "       'Turkey', 'Vietnam', 'Belarus', 'Colombia', 'Guinea', 'Holy See',\n",
        "       'Kazakhstan', 'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran',\n",
        "       'Mauritius', 'Liberia', 'Eswatini']\n",
        "\n",
        "    def __init__(self, df, country):\n",
        "        super().__init__(df)\n",
        "\n",
        "        while country not in self.available_countries:\n",
        "            country = input(f\"Country not available. The available list is: {self.available_countries}, please try again: \")\n",
        "\n",
        "        self.country = country\n",
        "\n",
        "    def get_positive(self):\n",
        "        try:\n",
        "            return self.df[(self.df['Country'] == self.country) & (self.df['sentiment'] == \"positive\")].shape[0]\n",
        "        except Exception as e:\n",
        "            print(f\"Error getting positive sentiment for {self.country}: {e}\")\n",
        "\n",
        "    def get_negative(self):\n",
        "        try:\n",
        "            return self.df[(self.df['Country'] == self.country) & (self.df['sentiment'] == \"negative\")].shape[0]\n",
        "        except Exception as e:\n",
        "            print(f\"Error getting negative sentiment for {self.country}: {e}\")\n",
        "\n",
        "    def get_sentiment(self):\n",
        "        try:\n",
        "            sentiment_counts = self.df[self.df['Country'] == self.country]['sentiment'].value_counts()\n",
        "            plt.figure(figsize=(8,8))\n",
        "            plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)\n",
        "            plt.title(f'Tweets by people from {self.country}')\n",
        "            plt.axis('equal')\n",
        "            plt.show()\n",
        "        except Exception as e:\n",
        "            print(f\"Error plotting sentiment for {self.country}: {e}\")\n",
        "\n",
        "    def compare_sentiment(self, sentiment=\"negative\"):\n",
        "        try:\n",
        "            tweets_by_country = self.df[self.df['sentiment'] == sentiment]['Country'].value_counts()\n",
        "            top_countries = tweets_by_country.head(20).sort_values(ascending=False)\n",
        "            plt.figure(figsize=(10, 8))\n",
        "\n",
        "            colors = plt.cm.tab20(range(len(top_countries)))\n",
        "\n",
        "            bars = plt.bar(top_countries.index, top_countries.values, color=colors)\n",
        "            plt.title(f'Top 20 counstries with {sentiment} tweets ')\n",
        "            plt.xticks(rotation=45, ha='right', fontsize=7)\n",
        "\n",
        "            plt.show()\n",
        "        except KeyError as e:\n",
        "            print(f\"KeyError: {e}. Make sure 'sentiment' and 'Country' columns exist in the DataFrame.\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error comparing sentiment: {e}\")\n",
        "\n",
        "class AgeAnalyzer(DataVisualizer):\n",
        "    available_ages = ['21-30', '31-45', '46-60', '70-100', '0-20', '60-70']\n",
        "\n",
        "    def __init__(self, df, age):\n",
        "        super().__init__(df)\n",
        "        while age not in self.available_ages:\n",
        "            age = input(f\"Age range not available. Ages availables are {self.available_ages}. Try again.\")\n",
        "        self.age = age\n",
        "\n",
        "    def get_positive(self):\n",
        "        try:\n",
        "            return self.df[(self.df['Age'] == self.age) & (self.df['sentiment'] == \"positive\")].shape[0]\n",
        "        except Exception as e:\n",
        "            print(f\"Error getting positive sentiment for {self.age} years old: {e}\")\n",
        "\n",
        "    def get_negative(self):\n",
        "        try:\n",
        "            return self.df[(self.df['Age'] == self.age) & (self.df['sentiment'] == \"negative\")].shape[0]\n",
        "        except Exception as e:\n",
        "            print(f\"Error getting negative sentiment for {self.age} years old: {e}\")\n",
        "\n",
        "    def get_sentiment(self):\n",
        "        try:\n",
        "            sentiment_counts = self.df[self.df['Age'] == self.age]['sentiment'].value_counts()\n",
        "            plt.figure(figsize=(8,8))\n",
        "            plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)\n",
        "            plt.title(f'Tweets by people of {self.age} years old')\n",
        "            plt.axis('equal')\n",
        "            plt.show()\n",
        "        except Exception as e:\n",
        "            print(f\"Error plotting sentiment for {self.age} years old: {e}\")\n",
        "\n",
        "    def compare_sentiment(self, sentiment=\"negative\"):\n",
        "        try:\n",
        "            tweets_by_age = self.df[self.df['sentiment'] == sentiment]['Age'].value_counts()\n",
        "            top_ages = tweets_by_age.head(20).sort_values(ascending=False)\n",
        "            plt.figure(figsize=(10, 8))\n",
        "\n",
        "            colors = plt.cm.tab20(range(len(top_ages)))\n",
        "\n",
        "            bars = plt.bar(top_ages.index, top_ages.values, color=colors)\n",
        "            plt.title(f'{sentiment} tweets in age ranges ')\n",
        "            plt.xticks(rotation=45, ha='right', fontsize=7)\n",
        "\n",
        "            plt.show()\n",
        "        except KeyError as e:\n",
        "            print(f\"KeyError: {e}. Make sure 'sentiment' and 'Age' columns exist in the DataFrame.\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error comparing sentiment: {e}\")\n"
      ],
      "metadata": {
        "id": "9mPFoHQQzhkL"
      },
      "execution_count": 243,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Solucionar los nombres de países solapados. Asegurarme de que el código de matplotlib está bien. Hacer otro tipo de gráficas para comparar países. Hacer otra clase que se base en la abstracta pero que sea para comparar edades.\n",
        "----\n",
        "Usar excepciones personalizadas\n"
      ],
      "metadata": {
        "id": "Zlt2dTX_9gD7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        ""
      ],
      "metadata": {
        "id": "v8DdI4d8s3et"
      },
      "execution_count": 85,
      "outputs": []
    }
  ]
}